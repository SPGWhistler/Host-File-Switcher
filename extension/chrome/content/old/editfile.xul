<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<dialog 
	title="Host File Helper" 
	onload="onLoad();" 
	ondialogaccept="return onSave();" 
	ondialogextra2="return onDelete();"
	buttons="accept,cancel,extra2" 
	buttonlabelaccept="Save" 
	buttonlabelextra2="Delete" 
	xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
<script><![CDATA[
	var search_index = 0;
	var last_needle = '';
	
	function onLoad()
	{
		if("arguments" in window && window.arguments.length > 0)
		{
			document.getElementById('filenameonly').value = window.arguments[0].inn.fileNameOnly;
			document.getElementById('filecontents').value = window.arguments[0].inn.fileContents;
			document.getElementById('filecontents').addEventListener("keypress", onKeyPress, true);
			document.getElementById('dialogheader').setAttribute('title', window.arguments[0].inn.dialogTitle);
			document.getElementById('dialogheader').setAttribute('description', window.arguments[0].inn.dialogDescription);
			if (window.arguments[0].inn.enableDelete != true)
			{
				document.documentElement.getButton("extra2").disabled = true;
			}
		}
	}
	
	function onKeyPress(event)
	{
		if (event.keyCode==9)
		{
			insertTab(event.originalTarget, "\t");
			event.preventDefault();
		}
	}
	
	function insertTab(element, aText)
	{
		var command = "cmd_insertText";
		var controller = element.controllers.getControllerForCommand(command);
		if (controller && controller.isCommandEnabled(command))
		{
			controller = controller.QueryInterface(Components.interfaces.nsICommandController);
			var params = Components.classes["@mozilla.org/embedcomp/command-params;1"];
			params = params.createInstance(Components.interfaces.nsICommandParams);
			params.setStringValue("state_data", aText);
			controller.doCommandWithParams(command, params);
		}
	}
	
	function onSave()
	{
		//Validate file name...
		var patt1=new RegExp(/^[^\\\/\:\*\?\"\<\>\|\.]+(\.[^\\\/\:\*\?\"\<\>\|\.]+)*$/);
		if (document.getElementById('filenameonly').value == '' 
			|| patt1.test(document.getElementById('filenameonly').value) == false)
		{
			alert('The host file name can not be blank and must only have alpha-numeric characters.');
			return false;
		}
		//Pass arguments back to caller...
		window.arguments[0].output = {
			fileNameOnly: document.getElementById('filenameonly').value, 
			fileContents: document.getElementById('filecontents').value, 
			status: 1
		};
		return true;
	}
	
	function onDelete()
	{
		window.arguments[0].output = {
			fileNameOnly: document.getElementById('filenameonly').value, 
			fileContents: document.getElementById('filecontents').value, 
			status: -1
		};
		document.documentElement.cancelDialog();
		return true;
	}
	
	function setSelectionRange(start, end)
	{
		//Move the cursor to the start of the selection.
		document.getElementById('filecontents').setSelectionRange(start, start);
		//Send a cmd_charNext command to make the textbox scroll to the cursor...
		var command = "cmd_charNext";
		var controller = document.getElementById('filecontents').controllers.getControllerForCommand(command);
		if (controller && controller.isCommandEnabled(command))
		{
			controller = controller.QueryInterface(Components.interfaces.nsICommandController);
			controller.doCommand(command);
		}
		//Select the selection...
		document.getElementById('filecontents').setSelectionRange(start, end);
		document.getElementById('filecontents').focus();
		//@TODO There is a problem with the above focus...
		//Without it, if you click the text area first, then the search field, it wont select
		//any text. With it, you have to click the search field each time to search - and the text
		//doesn't stay highlighted.
	}
	
	function findString(string, start)
	{
		haystack = document.getElementById('filecontents').value.substr(start);
		var matches = new RegExp(string, "i").exec(haystack);
		if (matches)
		{
			//Select first match
			setSelectionRange(start + matches.index, start + matches.index + matches[0].length);
			search_index = start + matches.index + matches[0].length;
		}
	}
	
	function doSearch()
	{
		needle = document.getElementById('filecontents_search').value;
		if (needle == "")
		{
			search_index = 0;
		}
		else
		{
			if (needle != last_needle)
			{
				search_index = 0;
				last_needle = needle;
			}
			if (search_index >= document.getElementById('filecontents').value.length)
			{
				search_index = 0;
			}
			findString(needle, search_index);
		}
	}
]]></script>
	<dialogheader id="dialogheader"/>
	<vbox>
		<hbox align="center">
			<label>Host File Name: </label>
			<textbox id="filenameonly" width="200"/>
		</hbox>
		<label flex="1">Edit the host file below and click save when you are finished.</label>
		<textbox id="filecontents" multiline="true" rows="15" wrap="off"/>
		<hbox align="center">
			<label>Find: </label>
			<textbox id="filecontents_search" type="search" oncommand="doSearch();"/>
		</hbox>
	</vbox>
</dialog>